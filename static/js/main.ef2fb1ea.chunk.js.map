{"version":3,"sources":["components/Navbar.js","components/Header.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","score","highScore","Header","Main","onClick","handleClick","id","alt","name","src","image","Footer","App","state","players","gameOver","setState","forEach","player","clicked","alert","find","i","console","log","this","sort","Math","random","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"u7EAiBeA,MAdf,SAAgBC,GACd,OACE,6BACE,yBAAKC,UAAU,gCACb,0BAAMA,UAAU,wBAAhB,wBACA,0BAAMA,UAAU,wBAAhB,4BACA,0BAAMA,UAAU,wBAAhB,UACUD,EAAME,MADhB,gBACoCF,EAAMG,c,MCOnCC,MAdf,WACE,OACE,4BAAQH,UAAU,UAChB,yBAAKA,UAAU,UACb,yDACA,+G,MCMOI,MAXf,SAAcL,GACZ,OACE,yBACEM,QAAS,kBAAMN,EAAMO,YAAYP,EAAMQ,KACvCP,UAAU,aACVQ,IAAKT,EAAMU,KACXC,IAAKX,EAAMY,S,MCCFC,MARf,WACE,OACE,4BAAQZ,UAAU,UAChB,yBAAKA,UAAU,cAAf,2B,OCqESa,E,2MAjEbC,MAAQ,CACNC,UACAd,MAAO,EACPC,UAAW,G,EAIbc,SAAW,WAcT,OAZI,EAAKF,MAAMb,MAAQ,EAAKa,MAAMZ,WAChC,EAAKe,SAAS,CAACf,UAAW,EAAKY,MAAMb,QAIvC,EAAKa,MAAMC,QAAQG,SAAQ,SAAAC,GACzBA,EAAOC,SAAU,KAInBC,MAAM,qBAAuB,EAAKP,MAAMb,OACxC,EAAKgB,SAAS,CAAChB,MAAO,KACf,G,EAITK,YAAc,SAAAC,GACZ,EAAKO,MAAMC,QAAQO,MAAK,SAACH,EAAQI,GAC/B,GAAIJ,EAAOZ,KAAOA,EAAI,CACpB,IAA2B,IAAvBQ,EAAQQ,GAAGH,QAMb,OALAL,EAAQQ,GAAGH,SAAU,EACrB,EAAKH,SAAS,CAAEhB,MAAO,EAAKa,MAAMb,MAAQ,IAAK,WAC7CuB,QAAQC,IAAIC,KAAKZ,MAAMb,UAEzB,EAAKa,MAAMC,QAAQY,MAAK,kBAAMC,KAAKC,SAAW,OACvC,EAEP,EAAKb,gB,wEAMH,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQf,MAAOyB,KAAKZ,MAAMb,MAAOC,UAAWwB,KAAKZ,MAAMZ,YACvD,kBAAC,EAAD,MACA,0BAAMF,UAAU,aACb0B,KAAKZ,MAAMC,QAAQe,KAAI,SAAAX,GAAM,OAC5B,kBAAC,EAAD,CACEZ,GAAIY,EAAOZ,GACXwB,IAAKZ,EAAOZ,GACZE,KAAMU,EAAOV,KACbE,MAAOQ,EAAOR,MACdS,QAASD,EAAOC,QAChBd,YAAa,EAAKA,kBAIxB,kBAAC,EAAD,W,GA5DU0B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ef2fb1ea.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\nfunction Navbar(props) {\n  return (\n    <div>\n      <nav className=\"navbar navbar-light bg-light\">\n        <span className=\"navbar-brand mb-0 h1\">Gridiron Clicky Game</span>\n        <span className=\"navbar-brand mb-0 h1\">Click an image to begin!</span>\n        <span className=\"navbar-brand mb-0 h1\">\n          Score: {props.score}  Top Score: {props.highScore}\n        </span>\n      </nav>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <div className=\"textBg\">\n        <h1>The Gridiron Clicky Game!</h1>\n        <h2>\n          Click on an image to earn a point - but don't click an image more than\n          once!\n        </h2>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./Main.css\";\n\nfunction Main(props) {\n  return (\n    <img\n      onClick={() => props.handleClick(props.id)}\n      className=\"click-item\"\n      alt={props.name}\n      src={props.image}\n    />\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./Footer.css\";\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"footerText\">Gridiron Clicky Game!</div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\nimport players from \"./players.json\";\n\nclass App extends Component {\n  state = {\n    players,\n    score: 0,\n    highScore: 0\n  };\n\n  // Function to end the game\n  gameOver = () => {\n    // if the player's score is higher than high score, update the high score\n    if (this.state.score > this.state.highScore){\n      this.setState({highScore: this.state.score})\n    };\n\n    // set each card's \"clicked\" value to false\n    this.state.players.forEach(player => {\n      player.clicked = false;\n    });\n\n    // Tell the player the game is over\n    alert(\"Game Over! Score: \" + this.state.score);\n    this.setState({score: 0});\n    return true;\n  }\n\n  // Function to handle when a player is clicked\n  handleClick = id => {\n    this.state.players.find((player, i) => {\n      if (player.id === id) {\n        if (players[i].clicked === false) {\n          players[i].clicked = true;\n          this.setState({ score: this.state.score + 1 }, function() {\n            console.log(this.state.score);\n          });\n          this.state.players.sort(() => Math.random() - 0.5);\n          return true;\n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} highScore={this.state.highScore}/>\n        <Header />\n        <main className=\"container\">\n          {this.state.players.map(player => (\n            <Main\n              id={player.id}\n              key={player.id}\n              name={player.name}\n              image={player.image}\n              clicked={player.clicked}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}